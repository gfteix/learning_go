package main

import (
	"encoding/json"
	"fmt"
)

type Product struct {
	ID   uint64 `json:"id"`
	Name string `json:"name,omitempty"`
}

func main() {
	// If one of the fields of your variable is not set, it will have the default zero value. By default, it will be present in the JSON string generated by json.Marshal or json.MarshalIndent :
	// We can add the omitempty directive into the struct tag to make it disappear from the outputed JSON :
	p := Product{ID: 42}
	bI, err := json.MarshalIndent(p, "", "  ")
	if err != nil {
		panic(err)
	}
	fmt.Println(string(bI))

	// To Skip a field from the marshal

	/*
		The use case is simple, you have a struct with ten fields, and you want to hide it in the encoded version of your JSON string (for instance, the field is no longer used by your clients).
		What you could do is to remove it from your struct. That solution is not the good one if you still use this field in the rest of your code.

		type Product struct {
		    ID          uint64 `json:"id"`
		    Name        string `json:"name,omitempty"`
		    Description string `json:"-"`
		}
	*/
}
